---
description: 
globs: 
alwaysApply: true
---
# Technology Stack - Telegram AI Bot Project

## üîß Core Technologies

### Runtime & Language
- **Node.js**: `>=18.0.0` (ES2022 modules)
- **TypeScript**: `5.8.3` (Strict mode enabled)
- **Module System**: ES Modules (`"type": "module"`)

### AI & Language Models
- **AI SDK (Vercel)**: `^4.3.16` - Modern unified LLM interface
- **OpenAI Provider**: `@ai-sdk/openai@^1.3.22` - Official OpenAI integration
- **Model**: GPT-4o (primary), GPT-4o-mini (fallback/cost optimization)

### Telegram Integration
- **Telegram Bot API**: `node-telegram-bot-api@^0.66.0`
- **Polling Mode**: Development (easier debugging)
- **Webhook Mode**: Production (better performance)

### Data Validation & Type Safety
- **Zod**: `^3.25.48` - Runtime schema validation
- **TypeScript Strict Mode**: Full type safety
- **Environment Validation**: Zod schemas for env vars

### Development Tools
- **TSX**: `4.19.4` - TypeScript execution for development
- **Build System**: Native TypeScript compiler (`tsc`)
- **Type Definitions**: 
  - `@types/node@^22.15.29`
  - `@types/node-telegram-bot-api@^0.64.8`

### Configuration Management
- **Environment Variables**: `dotenv@^16.5.0`
- **Config Pattern**: Centralized configuration with validation

## üèóÔ∏è Architecture Decisions

### Project Structure
```
src/
‚îú‚îÄ‚îÄ bot/           # Telegram bot logic
‚îú‚îÄ‚îÄ ai/            # AI SDK integration  
‚îú‚îÄ‚îÄ utils/         # Shared utilities
‚îî‚îÄ‚îÄ types/         # TypeScript definitions
```

### AI Integration Patterns
- **Text Generation**: `generateText()` for simple responses
- **Streaming**: `streamText()` for real-time chat
- **Multi-step Processing**: `maxSteps` for complex queries
- **Context Management**: Conversation history with memory limits

### Error Handling Strategy
- **Graceful Degradation**: Fallback responses for API failures
- **Rate Limiting**: User-level and API-level protection
- **Retry Logic**: Exponential backoff for transient failures
- **Logging**: Structured logging without exposing secrets

### Security Approach
- **Environment Variables**: All secrets in `.env`
- **Input Validation**: Zod schemas for all external data
- **Rate Limiting**: Per-user message limits
- **API Key Security**: Never logged or exposed

## üöÄ Development Workflow

### Build Process
```bash
npm run dev      # Development with tsx
npm run build    # Production build
npm run start    # Run compiled JS
npm run lint     # TypeScript check
```

### Environment Setup
- **Development**: Polling mode, verbose logging
- **Production**: Webhook mode, optimized logging
- **Testing**: Mock APIs, isolated environments

### Code Quality Standards
- **TypeScript Strict**: All strict checks enabled
- **Module Resolution**: Bundler-style for modern Node.js
- **Source Maps**: Enabled for debugging
- **Declaration Files**: Generated for type exports

## üîÑ AI SDK Integration Specifics

### Provider Configuration
```typescript
import { openai } from '@ai-sdk/openai';
const model = openai('gpt-4o');
```

### Conversation Management
- **History Limit**: 20 messages (configurable)
- **Context Preservation**: Full conversation context
- **Memory Management**: Automatic cleanup of old messages

### Tool Integration (Future)
- **Calculator**: Math operations
- **Web Search**: Real-time information
- **Custom Tools**: Extensible tool system

### Response Optimization
- **Brevity**: Configured for concise responses
- **Streaming**: Real-time response delivery
- **Caching**: Response caching for repeated queries

## üìä Performance Considerations

### Scalability
- **Single Instance**: Initial deployment
- **Horizontal Scaling**: Future consideration
- **Database**: In-memory for MVP, PostgreSQL for production

### Resource Management
- **Memory**: Conversation history limits
- **API Calls**: Rate limiting and cost optimization
- **Response Time**: Sub-2 second target for simple queries

### Monitoring
- **Logging**: Structured JSON logs
- **Metrics**: API usage, response times, error rates
- **Health Checks**: Basic bot status monitoring

## üîí Security & Compliance

### Data Protection
- **No Persistent Storage**: In-memory conversation state
- **Message Privacy**: No logging of user messages
- **API Security**: Secure token management

### Rate Limiting
- **User Level**: 10 messages/minute (configurable)
- **Global Level**: API quota management
- **Burst Protection**: Anti-spam measures

### Error Handling
- **Never Expose**: API keys, internal errors
- **User Friendly**: Clear error messages
- **Fallback**: Graceful degradation

---

## üìã Version History

**Last Updated**: Initial stack definition
**Node.js Version**: 18+
**TypeScript**: 5.8.3
**AI SDK**: 4.3.16

**Review Schedule**: After major dependency updates or architectural changes

**Note**: This stack is optimized for rapid development, type safety, and production readiness with modern Node.js and AI capabilities. 